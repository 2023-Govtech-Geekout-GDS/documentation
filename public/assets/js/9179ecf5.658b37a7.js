"use strict";(self.webpackChunkgds_bootcamp=self.webpackChunkgds_bootcamp||[]).push([[9874],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={},i="1.0 Completing the CRUD API",l={unversionedId:"backend/Crud",id:"backend/Crud",title:"1.0 Completing the CRUD API",description:"So far, the front-end app has been supported by a backend which provides persistence. As a warm-up, we're going to complete an implementation of the CRUD interface.",source:"@site/docs/backend/10-Crud.md",sourceDirName:"backend",slug:"/backend/Crud",permalink:"/docs/backend/Crud",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/backend/10-Crud.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"1. Backend",permalink:"/docs/category/1-backend"},next:{title:"1.1 Refactoring",permalink:"/docs/backend/Refactoring"}},p={},d=[{value:"Setting up",id:"setting-up",level:2},{value:"Base checkpoint",id:"base-checkpoint",level:2},{value:"Update",id:"update",level:2},{value:"Read",id:"read",level:2}],s={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"10-completing-the-crud-api"},"1.0 Completing the CRUD API"),(0,r.kt)("p",null,"So far, the front-end app has been supported by a backend which provides persistence. As a warm-up, we're going to complete an implementation of the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"},"CRUD")," interface."),(0,r.kt)("p",null,"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"backend/src/routes"),". You'll find the following files:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"File"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"index.ts")),(0,r.kt)("td",{parentName:"tr",align:null},"A cosmetic holder for all routes / methods supported. Most importantly, it does ",(0,r.kt)("inlineCode",{parentName:"td"},"default export")," of an ",(0,r.kt)("inlineCode",{parentName:"td"},"express.Router()"),", which will be used by the App")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"methods.ts")),(0,r.kt)("td",{parentName:"tr",align:null},"Create, Read and Delete have been implemented here")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newMethods.ts")),(0,r.kt)("td",{parentName:"tr",align:null},"You will implement 2 remaining methods (Read single and Update) here")))),(0,r.kt)("h2",{id:"setting-up"},"Setting up"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install\n")),(0,r.kt)("h2",{id:"base-checkpoint"},"Base checkpoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run test-0\n")),(0,r.kt)("p",null,"At this point you should have ",(0,r.kt)("inlineCode",{parentName:"p"},"6 skipped, 5 passed, 11 total")," but as we progress through today's walkthrough we will be running more tests."),(0,r.kt)("h2",{id:"update"},"Update"),(0,r.kt)("p",null,"Right now, ",(0,r.kt)("inlineCode",{parentName:"p"},"updateTodoById")," is stubbed out, returning the HTTP code for Not Implemented. "),(0,r.kt)("p",null,"Edit the code - it should modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"todoList")," and return ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," upon success. For more details, navigate to the ",(0,r.kt)("inlineCode",{parentName:"p"},"swagger.json")," documentation to check intended behaviour. Or, if you prefer to use a UI, start up Docker compose and find the docs ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3001/swagger"},"locally hosted"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"At this point you only need to implement return codes 200 and 400"))),(0,r.kt)("p",null,"Feel free to reference the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteTodoById")," - the necessary code is very similar!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'export async function deleteTodoById(req: Request, res: Response) {\n  const { id } = req.params;\n  if (id in todoList) {\n    delete todoList[id];\n    return res.status(200).json(todoList);\n  } else {\n    return res.status(400).json({ message: "UUID does not exist" });\n  }\n}\n')),(0,r.kt)("p",null,"When your code is complete, ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run test-1"),". You should find that 2 more tests (",(0,r.kt)("inlineCode",{parentName:"p"},'"PUT /todos/{id}"'),") are passing!"),(0,r.kt)("p",null,"The total should now be ",(0,r.kt)("inlineCode",{parentName:"p"},"2 failed, 3 skipped, 7 passed, 12 total"),". Ignore the errors for now, we will be addressing them below."),(0,r.kt)("h2",{id:"read"},"Read"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts"),", you'll notice that we expose a Read method as a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," call to ",(0,r.kt)("inlineCode",{parentName:"p"},"/todos"),". But while this API provides the entire Todo list, it's quite unusual that a frontend will want everything at once. More typically, frontends will request for a single object, as specified by their ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,r.kt)("p",null,"Implement this new route. For experienced devs, this will be super easy, but just in case, here's a checklist of files you should be touching:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"File"),(0,r.kt)("th",{parentName:"tr",align:null},"Necessary work"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"newMethods.ts")),(0,r.kt)("td",{parentName:"tr",align:null},"Export a new function called ",(0,r.kt)("inlineCode",{parentName:"td"},"getTodoById")," out of this file. The signature will be identical to the previous functions. Remember to handle error cases!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"index.ts")),(0,r.kt)("td",{parentName:"tr",align:null},"You'll need to add a new route on ",(0,r.kt)("inlineCode",{parentName:"td"},"todoRouter")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"GET")," the todo item with its ",(0,r.kt)("inlineCode",{parentName:"td"},"id"),", and import the new method you wrote in ",(0,r.kt)("inlineCode",{parentName:"td"},"newMethods.ts"))))),(0,r.kt)("p",null,"Once more, when your code is complete, ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run test-1")," to verify. With the ",(0,r.kt)("inlineCode",{parentName:"p"},'"GET /todos/{id}"')," tests passing, the total should now be ",(0,r.kt)("inlineCode",{parentName:"p"},"2 skipped, 9 passed, 11 total")),(0,r.kt)("hr",null),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udea9 Are you stuck? Fear not! You can proceed on by checking out to the next checkpoint \ud83d\ude00"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre"},"git checkout checkpoint-1\n"))))}u.isMDXComponent=!0}}]);