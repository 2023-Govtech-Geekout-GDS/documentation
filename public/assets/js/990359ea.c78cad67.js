"use strict";(self.webpackChunkgds_bootcamp=self.webpackChunkgds_bootcamp||[]).push([[4062],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),f=o,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5093:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={},i="4.3 ECS Task Definitions",s={unversionedId:"infrastructure/ECS-Task",id:"infrastructure/ECS-Task",title:"4.3 ECS Task Definitions",description:"A task definition is required to run Docker containers in Amazon ECS. The following are some of the parameters that you can specify in a task definition:",source:"@site/docs/infrastructure/43-ECS-Task.md",sourceDirName:"infrastructure",slug:"/infrastructure/ECS-Task",permalink:"/docs/infrastructure/ECS-Task",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/infrastructure/43-ECS-Task.md",tags:[],version:"current",sidebarPosition:43,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4.2 ECS Cluster",permalink:"/docs/infrastructure/ECS-Cluster"},next:{title:"4.4 Clean Up",permalink:"/docs/infrastructure/CleanUp"}},u={},c=[{value:"Instructions",id:"instructions",level:4},{value:"Definition of Done",id:"definition-of-done",level:4}],l={toc:c};function p(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"43-ecs-task-definitions"},"4.3 ECS Task Definitions"),(0,o.kt)("p",null,"A task definition is required to run Docker containers in Amazon ECS. The following are some of the parameters that you can specify in a task definition:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The Docker image to use with each container in your task"),(0,o.kt)("li",{parentName:"ol"},"How much CPU and memory to use with each task or each container within a task"),(0,o.kt)("li",{parentName:"ol"},"The launch type to use, which determines the infrastructure that your tasks are hosted on"),(0,o.kt)("li",{parentName:"ol"},"The Docker networking mode to use for the containers in your task"),(0,o.kt)("li",{parentName:"ol"},"The logging configuration to use for your tasks"),(0,o.kt)("li",{parentName:"ol"},"Whether the task continues to run if the container finishes or fails"),(0,o.kt)("li",{parentName:"ol"},"The command that the container runs when it's started"),(0,o.kt)("li",{parentName:"ol"},"Any data volumes that are used with the containers in the task"),(0,o.kt)("li",{parentName:"ol"},"The IAM role that your tasks use")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"instructions"},"Instructions"),(0,o.kt)("p",null,"Now we will take a look at ",(0,o.kt)("inlineCode",{parentName:"p"},"ecs-containers.yml")," to understand the creation of our ECS Task Definition and observe we point our loadbalancers to the right tasks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"AWSTemplateFormatVersion: '2010-09-09'\nDescription: container on ecs cluster\n\n# Parameters enable you to input custom values to your template each time you create or update a stack.\nParameters:\n\n  FrontendRepository:\n    Description: >-\n      Provide Frontend ECR repository name\n    Type: String\n  BackendRepository:\n    Description: >-\n      Provide Backend ECR repository name\n    Type: String\n\nResources:\n  # Define ECS task definition for frontend application\n  TaskFrontend:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: frontend\n      Cpu: 512\n      Memory: 1024\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      ExecutionRoleArn: !ImportValue 'ECSTaskExecutionRole'\n      ContainerDefinitions:\n        - Name: frontend-container\n          Image: !Ref FrontendRepository\n          Cpu: 512\n          Memory: 1024\n          PortMappings:\n            - ContainerPort: 3000\n              Protocol: tcp\n          # Send logs to CloudWatch Logs\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !Ref LogGroup\n              awslogs-stream-prefix: ecs\n\n  LogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: 'loggroup-frontend-td'\n\n  # Define ECS task definition for backend application\n  TaskBackend:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: backend\n      Cpu: 512\n      Memory: 1024\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      ExecutionRoleArn: !ImportValue 'ECSTaskExecutionRole'\n      ContainerDefinitions:\n        - Name: backend-container\n          Image: !Ref BackendRepository\n          Cpu: 512\n          Memory: 1024\n          PortMappings:\n            - ContainerPort: 9000\n              Protocol: tcp\n          # Send logs to CloudWatch Logs\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !Ref LogGroupBackend\n              awslogs-stream-prefix: ecs\n  \n  LogGroupBackend:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: 'loggroup-backend-td'\n\n  # Define ecs service in public subnet to run \n  # frontend task definition\n  FrontendService:\n    Type: AWS::ECS::Service\n    DependsOn: PublicListenerRuleFrontend\n    Properties:\n      ServiceName: frontend-app\n      TaskDefinition: !Ref 'TaskFrontend'\n      Cluster: !ImportValue 'ECSCluster'\n      LaunchType: FARGATE\n      DesiredCount: 1\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 70\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED\n          Subnets:\n            - !ImportValue PublicSubnet1\n            - !ImportValue PublicSubnet2\n          SecurityGroups:\n            - !ImportValue FargateContainerSecurityGroup\n      LoadBalancers:\n        - ContainerName: frontend-container\n          ContainerPort: 3000\n          TargetGroupArn: !ImportValue PublicTargetGroupFrontend\n  \n  # Define ecs service in private subnet to run \n  # backend task definition\n  BackendService:\n    Type: AWS::ECS::Service\n    DependsOn: PublicListenerRuleBackend\n    Properties:\n      ServiceName: backend-app\n      TaskDefinition: !Ref 'TaskBackend'\n      Cluster: !ImportValue 'ECSCluster'\n      LaunchType: FARGATE\n      DesiredCount: 1\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 70\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED\n          Subnets:\n            - !ImportValue PublicSubnet1\n            - !ImportValue PublicSubnet1\n          SecurityGroups:\n            - !ImportValue FargateContainerSecurityGroup\n      LoadBalancers:\n        - ContainerName: backend-container\n          ContainerPort: 9000\n          TargetGroupArn: !ImportValue PublicTargetGroupBackend\n\n  # The rules that you define for your listener determine how the load balancer routes \n  # requests to the targets in one or more target groups.\n  PublicListenerRuleFrontend:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !ImportValue PublicLoadBalancerListener\n      Priority: 2\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - /*\n      Actions:\n        - TargetGroupArn: !ImportValue PublicTargetGroupFrontend\n          Type: forward\n  \n  PublicListenerRuleBackend:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !ImportValue PublicLoadBalancerListener\n      Priority: 1\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - /api/*\n      Actions:\n        - TargetGroupArn: !ImportValue PublicTargetGroupBackend\n          Type: forward\n\nOutputs:\n\n  FrontendEndpoint:\n    Description: Frontend Endpoint\n    Value: !Join ['', ['http://', !ImportValue PublicDomainName, '/']]\n    Export:\n      Name: 'FrontendEndpoint'\n  \n  BackendEndpoint:\n    Description: Backend Endpoint\n    Value: !Join ['', ['http://', !ImportValue PublicDomainName, '/api']]\n    Export:\n      Name: 'BackendEndpoint'\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Proceed to upload this template to Cloudformation to provision our Frontend and Backend tasks. The following is a high level diagram to illustrate what you have just built."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ecs-task",src:t(1185).Z,width:"968",height:"786"})),(0,o.kt)("h4",{id:"definition-of-done"},"Definition of Done"),(0,o.kt)("p",null,"Congratulations! If done correctly you can access your ECS console to observe the tasks that you have created."),(0,o.kt)("p",null,"You can find the domain in the output tab of the cloudformation console where you created your ecs-task."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You should be able to access the backend application from your browser"),(0,o.kt)("li",{parentName:"ol"},"Your frontend application should be able to access your backend application")))}p.isMDXComponent=!0},1185:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/ecs-task-defintiion-ad22831f47c8ba88c6f995403509ff4c.png"}}]);