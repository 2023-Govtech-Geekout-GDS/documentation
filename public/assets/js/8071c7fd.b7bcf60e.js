"use strict";(self.webpackChunkgds_bootcamp=self.webpackChunkgds_bootcamp||[]).push([[8549],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const i={},r="2.1 Submitting To Do",s={unversionedId:"frontend/SubmitToDo",id:"frontend/SubmitToDo",title:"2.1 Submitting To Do",description:"As a user, I would like to see if my todo list has changed since the last time I checked, so that I can stay updated on my tasks.",source:"@site/docs/frontend/21-SubmitToDo.md",sourceDirName:"frontend",slug:"/frontend/SubmitToDo",permalink:"/docs/frontend/SubmitToDo",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/21-SubmitToDo.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2.0 The Frontend",permalink:"/docs/frontend/TheFrontend"},next:{title:"2.2 Done When I Say So",permalink:"/docs/frontend/DoneWhenISaySo"}},l={},d=[{value:"Adding a button",id:"adding-a-button",level:2},{value:"Making it click",id:"making-it-click",level:2},{value:"Making Progress",id:"making-progress",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"21-submitting-to-do"},"2.1 Submitting To Do"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"As a user, I would like to see if my todo list has changed since the last time I checked, so that I can stay updated on my tasks."),(0,a.kt)("p",{parentName:"blockquote"},"It would be awesome to also have a visual indication of the system working on my request. ^","_","^")),(0,a.kt)("p",null,'In this exercise, we will add an "Add" button to the Todo application.'),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"adding-a-button"},"Adding a button"),(0,a.kt)("p",null,"Let's start by adding a button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Button size="sm" variant="primary">\n  Add\n</Button>\n')),(0,a.kt)("p",null,"The button can be placed anywhere, we've decided to put it just below the to-do list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"          </Table>\n        </Form>\n        {/* to implement: button */}\n      </div>\n    </Container>\n")),(0,a.kt)("p",null,"These Buttons are standard SGDS components and come in different styles! Check them out ",(0,a.kt)("a",{parentName:"p",href:"https://react.designsystem.tech.gov.sg/?path=/docs/components-button--default-story"},"here"),"."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"making-it-click"},"Making it click"),(0,a.kt)("p",null,"When a button is ",(0,a.kt)("inlineCode",{parentName:"p"},"clicked"),", it fires the attached ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick(event)")," handler.\nStart by defining a new callback:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'async function submitNewTodo() {\n  console.log("submitted new to-do!");\n}\n')),(0,a.kt)("p",null,"Then hook it up to the button:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Button\n  size="sm"\n  variant="primary"\n  onClick={/* insert callback function here */}\n>\n  Add\n</Button>\n')),(0,a.kt)("p",null,"When refresh is clicked, you should now see a log entry appear in the console!"),(0,a.kt)("p",null,"Instead of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log()"),", let's make a call to the backend:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'async function submitNewTodo() {\n  console.log("submitting new to-do...");\n\n  const newTodo = {\n    description: newTodoDescription,\n  };\n  await axios.post(`${CONFIG.API_ENDPOINT}/todos`, newTodo);\n\n  console.log("submitted new to-do!");\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"asynchronous")," function ",(0,a.kt)("inlineCode",{parentName:"p"},"axios.post")," is making a network call to our backend API to submit the new ",(0,a.kt)("inlineCode",{parentName:"p"},"todo item"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," keyword means that these statements will block, happening ",(0,a.kt)("em",{parentName:"p"},"sequentially")," one after another. That means that the second log entry is created only after the refresh is complete."),(0,a.kt)("p",null,"After submitting the new ",(0,a.kt)("inlineCode",{parentName:"p"},"todo item"),", let's update our table to show the latest list of ",(0,a.kt)("inlineCode",{parentName:"p"},"todos"),". We have created a function ",(0,a.kt)("inlineCode",{parentName:"p"},"populateTodos")," for this purpose. Similarly, make an ",(0,a.kt)("inlineCode",{parentName:"p"},"asynchronous")," call for this, and remove the new to-do description."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'async function submitNewTodo() {\n  const newTodo = {\n    description: newTodoDescription,\n  };\n  await axios.post(`${CONFIG.API_ENDPOINT}/todos`, newTodo);\n  await /* call populateTodos here */\n  setNewTodoDescription("");\n}\n')),(0,a.kt)("p",null,"But how does setNewTodoDescription work? Let's find out in the next section!"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"making-progress"},"Making Progress"),(0,a.kt)("p",null,"Visual feedback is an important way of communicating with the user."),(0,a.kt)("p",null,"A progress indicator satisfies the user's need to know that the system received, and is processing, their request."),(0,a.kt)("p",null,"Start by adding a new piece of state to the Todo component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const [isLoading, setIsLoading] = useState(false);\n")),(0,a.kt)("p",null,"Creating state in this way is useful because React can 'hook' into every modification to the state and help keep track of what changed / needs to be rendered again."),(0,a.kt)("p",null,"When calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState()")," hook, React gives you a read-only variable (with the default parameter specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState<T>(default: T)")," call), and a setter you can call like this: ",(0,a.kt)("inlineCode",{parentName:"p"},"setIsLoading(true)"),"."),(0,a.kt)("p",null,"Let's hook up the ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoading")," state to the button. When the button is loading, we want to display the text ",(0,a.kt)("inlineCode",{parentName:"p"},"loading...")," and disable the button from getting clicked."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Button\n  size="sm"\n  variant="primary"\n  onClick={submitNewTodo}\n  disabled={/* insert boolean refresh state here */}\n>\n  {isLoading ? "loading..." : "Add"}\n</Button>\n')),(0,a.kt)("p",null,"When the button is clicked, it should set the loading indicator with ",(0,a.kt)("inlineCode",{parentName:"p"},"setIsLoading(true)"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const [isLoading, setIsLoading] = useState(false);\nasync function submitNewTodo() {\n  /* start the loading here */\n  const newTodo = {\n    description: newTodoDescription,\n  };\n  await axios.post(`${CONFIG.API_ENDPOINT}/todos`, newTodo);\n  await populateTodos();\n  setNewTodoDescription("");\n  /* stop the loading here */\n}\n')),(0,a.kt)("p",null,"The isLoading animation starts before starting the actual submitting operation. When the ",(0,a.kt)("inlineCode",{parentName:"p"},"await populateTodos()")," synchronously completes, the refresh animation stops."),(0,a.kt)("p",null,"On a local network, this refresh happens too quickly to be perceptible, so we're waiting a couple hundred milliseconds to ",(0,a.kt)("del",{parentName:"p"},"charge our capacitors")," queue up the request."))}p.isMDXComponent=!0}}]);