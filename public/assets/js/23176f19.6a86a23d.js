"use strict";(self.webpackChunkgds_bootcamp=self.webpackChunkgds_bootcamp||[]).push([[7672],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},i="1.1 Refactoring",s={unversionedId:"backend/Refactoring",id:"backend/Refactoring",title:"1.1 Refactoring",description:"images",source:"@site/docs/backend/11-Refactoring.md",sourceDirName:"backend",slug:"/backend/Refactoring",permalink:"/docs/backend/Refactoring",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/backend/11-Refactoring.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"1.0 Completing the CRUD API",permalink:"/docs/backend/Crud"},next:{title:"1.2 Calling other services",permalink:"/docs/backend/OtherServices"}},l={},c=[{value:"Why&#39;s the code like that?",id:"whys-the-code-like-that",level:2},{value:"Checkpoint",id:"checkpoint",level:3},{value:"Less is More",id:"less-is-more",level:2},{value:"Is the refactor worth it?",id:"is-the-refactor-worth-it",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"11-refactoring"},"1.1 Refactoring"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/25238106/133753451-12bb5fca-fa01-41cd-b666-9629940b4784.jpg",alt:"images"})),(0,o.kt)("p",null,"The tests are passing! That's it ... right? For a hackathon / school project, probably. Knowing when to walk away is an essential life skill."),(0,o.kt)("p",null,"One major difference when moving from school to a company is the size of the codebase. A single repository may hold multiple projects, with dozens of schemas and micro-services. Organizing code in a predictable, sensible way allows readers to understand the essentials without needing the full context. And well-factored code allows for meaningful testing, which then allows everyone to edit confidently. Popular acronyms for such ideas include ",(0,o.kt)("a",{parentName:"p",href:"https://stackify.com/solid-design-principles/"},"SOLID"),", ",(0,o.kt)("a",{parentName:"p",href:"https://thevaluable.dev/dry-principle-cost-benefit-example/"},"DRY")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.interaction-design.org/literature/article/kiss-keep-it-simple-stupid-a-design-principle"},"KISS"),". "),(0,o.kt)("h2",{id:"whys-the-code-like-that"},"Why's the code like that?"),(0,o.kt)("p",null,"We began with 3 CRUD methods, and you've written 2 more. They've been put in 2 separate files  ... but why? Imagine reading the code for the first time - the separation of code into files should be a meaningful signal about the code's structure. Code organization that results from the history of your writing process is rarely relevant to future dev work. "),(0,o.kt)("p",null,"Refactor the 2 files. You can either place each function in their own file (total 5 files), or join them all into 1 file. Don't forget to update the import statements in ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts")),(0,o.kt)("h3",{id:"checkpoint"},"Checkpoint"),(0,o.kt)("p",null,"None! Refactoring often produces invisible changes. When your code is complete, ",(0,o.kt)("inlineCode",{parentName:"p"},"npm run test-1")," to verify that it is still ",(0,o.kt)("inlineCode",{parentName:"p"},"3 skipped, 9 passed, 12 total"),"."),(0,o.kt)("h2",{id:"less-is-more"},"Less is More"),(0,o.kt)("p",null,"Reading through the methods, you'll notice a lot of code that's similar. For example, the error-handling in ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteTodoById")," reads:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'return res.status(400).json({ message: "UUID does not exist" });\n')),(0,o.kt)("p",null,"This is pretty compact, and typically, leaving it as-it-is will be fine. But as this grows in complexity, there are a few reasons why it becomes a code smell:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Our API contract specifies a ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," field, but the ",(0,o.kt)("inlineCode",{parentName:"p"},".json()")," method accepts any object. We might easily have typo-ed ",(0,o.kt)("inlineCode",{parentName:"p"},'{ mesagge: "UUID does not exist" }')," or changed it to a plausible (but wrong) ",(0,o.kt)("inlineCode",{parentName:"p"},'{ errorMessage: "UUID does not exist" }')," and the code wouldn't complain!")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"It imposes additional requirements on a developer - someone who writes a new method must be mindful about the field's name, when they might just want to edit the business logic."))),(0,o.kt)("p",null,"Write a helper-method or reusable ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," object to abstract away from some of these details, then use it in all methods (where relevant)."),(0,o.kt)("p",null,"Once more, when your code is complete, ",(0,o.kt)("inlineCode",{parentName:"p"},"npm run test-1")," to verify that it is still ",(0,o.kt)("inlineCode",{parentName:"p"},"3 skipped, 9 passed, 12 total"),"."),(0,o.kt)("h3",{id:"is-the-refactor-worth-it"},"Is the refactor worth it?"),(0,o.kt)("p",null,"Notice that the helper function you write can only handle a limited number of use cases. For example, if you wrote a wrapper for the JSON formatting:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'function foo(message: string) {\n  return { message };\n}\nconsole.log(foo("my error message")) // Will print { message: "my error message" }\n')),(0,o.kt)("p",null,"then ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," is not very helpful when creating JSON payloads with other fields."),(0,o.kt)("p",null,"You might conclude that we should write a more flexible helper method. Perhaps the field name ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," should be editable as well! So you expand the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'function fooV2(fieldName: string, message: string) {\n  const output: {[key: string]: string} = {}\n  output[fieldName] = message;\n  return output;\n}\nconsole.log(fooV2("message", "my error message")) // Will print { message: "my error message" }\n')),(0,o.kt)("p",null,"Congratulations, you've just written a useless helper function that's worse than the original syntax. "),(0,o.kt)("p",null,"In general, you want to write helpers that:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Enforce invariants / business logic (e.g. our error messages are always named 'message')"),(0,o.kt)("li",{parentName:"ol"},"Have signatures that correctly express the freedom offered - if ",(0,o.kt)("inlineCode",{parentName:"li"},"X")," is not a sensible argument, I shouldn't be able to write ",(0,o.kt)("inlineCode",{parentName:"li"},"foo(X)")," at all."),(0,o.kt)("li",{parentName:"ol"},"Retain natural patterns - JS developers are deeply familiar with JSON, so don't hide JSONs behind a custom signature like ",(0,o.kt)("inlineCode",{parentName:"li"},"fooV2")," does.")),(0,o.kt)("hr",null),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udea9 Are you stuck? Fear not! You can proceed on by checking out to the next checkpoint \ud83d\ude00"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"git checkout checkpoint-2\n"))))}u.isMDXComponent=!0}}]);